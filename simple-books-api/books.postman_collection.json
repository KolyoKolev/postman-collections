{
	"info": {
		"_postman_id": "4d1694f5-db23-4bf8-8c61-8300779d6d10",
		"name": "books",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Healthy Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const res = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('The length of the list is greater than 0', () => {\r",
							"    pm.expect(res.length).to.be.greaterThan(0);\r",
							"});\r",
							"\r",
							"pm.test('Books have correct properties and value types', () => {\r",
							"    res.forEach(book => {\r",
							"        pm.expect(book.id).to.be.a('Number');\r",
							"        pm.expect(book.name).to.be.a('String');\r",
							"        pm.expect(book.type).to.be.a('String');\r",
							"        pm.expect(book.available).to.be.a('Boolean');\r",
							"    });\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					]
				}
			},
			"response": []
		},
		{
			"name": "Query By Type Fiction",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const res = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Books of type fiction to have 4 items', () => {\r",
							"    pm.expect(res).to.have.length(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set('typeValue', 'fiction');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books?type={{typeValue}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "{{typeValue}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Query By Type Non-Fiction",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const res = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('Books of type fiction to have 2 items', () => {\r",
							"    pm.expect(res).to.have.length(2);\r",
							"})"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set('typeValue', 'non-fiction');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books?type={{typeValue}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "{{typeValue}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Query By Non-Supported Type",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const res = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 400\", () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Has property 'error' with proper value\", () => {\r",
							"    pm.expect(res).haveOwnProperty('error');\r",
							"    pm.expect(res.error).to.be.a('String');\r",
							"    pm.expect(res.error).to.eq(pm.collectionVariables.get('invalidTypeValueErrorMessage'));\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set('typeValue', 'no-fiction');"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books?type={{typeValue}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "{{typeValue}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Query By Limit In Range",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const res = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('The length of the list is exactly 2', () => {\r",
							"    pm.expect(res.length).eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set('limitValue', 2);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books?limit={{limitValue}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "limit",
							"value": "{{limitValue}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Query By Limit Outside Of Range",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const res = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 400\", () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Has property 'error' with proper value\", () => {\r",
							"    pm.expect(res).haveOwnProperty('error');\r",
							"    pm.expect(res.error).to.be.a('String');\r",
							"    pm.expect(res.error).to.eq(pm.collectionVariables.get('invalidLimitValueErrorMessage'));\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set('limitValue', 21);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books?limit={{limitValue}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "limit",
							"value": "{{limitValue}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Query By Type Fiction And Limit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const res = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('The length of the list is 4', () => {\r",
							"    pm.expect(res.length).eql(4);\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set('typeValue', 'fiction');\r",
							"pm.collectionVariables.set('limitValue', 4);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books?type={{typeValue}}&limit={{limitValue}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "{{typeValue}}"
						},
						{
							"key": "limit",
							"value": "{{limitValue}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Query By Type Non-Fiction And Limit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const res = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test('The length of the list is exactly 2', () => {\r",
							"    pm.expect(res.length).eql(2)\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"pm.collectionVariables.set('typeValue', 'non-fiction');\r",
							"pm.collectionVariables.set('limitValue', 2);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books?type={{typeValue}}&limit={{limitValue}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "{{typeValue}}"
						},
						{
							"key": "limit",
							"value": "{{limitValue}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Query By Type Non-Supported And Limit",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const res = pm.response.json();\r",
							"\r",
							"pm.test(\"Status code is 400\", () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Has property 'error' with proper value\", () => {\r",
							"    pm.expect(res).haveOwnProperty('error');\r",
							"    pm.expect(res.error).to.be.a('String');\r",
							"    pm.expect(res.error).to.eq(pm.collectionVariables.get('invalidTypeValueErrorMessage'));\r",
							"});"
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"    pm.collectionVariables.set('typeValue', 'no-fiction');\r",
							"    pm.collectionVariables.set('limitValue', 3);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/books?type={{typeValue}}&limit={{limitValue}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"books"
					],
					"query": [
						{
							"key": "type",
							"value": "{{typeValue}}"
						},
						{
							"key": "limit",
							"value": "{{limitValue}}"
						}
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "typeValue",
			"value": ""
		},
		{
			"key": "limitValue",
			"value": ""
		},
		{
			"key": "invalidTypeValueErrorMessage",
			"value": ""
		},
		{
			"key": "invalidLimitValueErrorMessage",
			"value": ""
		}
	]
}