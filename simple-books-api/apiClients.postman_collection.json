{
	"info": {
		"_postman_id": "43db9d3e-d188-46f8-8a3f-7dc3e99540ca",
		"name": "apiClients",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Healthy Check",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test('Status code is 404', () => {\r",
							"    pm.response.to.have.status(404);\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api-clients",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api-clients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Empty Body",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Has property 'message' with proper value \", () => {\r",
							"    const res = pm.response.json();\r",
							"    pm.expect(res).haveOwnProperty('error');\r",
							"    pm.expect(res.error).to.eq(pm.collectionVariables.get('invalidOrMissingClientNameErrorMessage'));\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/api-clients",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api-clients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Empty Client Name",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Has property 'message' with proper value \", () => {\r",
							"    const res = pm.response.json();\r",
							"    pm.expect(res).haveOwnProperty('error');\r",
							"    pm.expect(res.error).to.eq(\r",
							"    pm.collectionVariables.get('invalidOrMissingClientNameErrorMessage'));\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"\",\r\n   \"clientEmail\": \"test.testov@test.test\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api-clients",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api-clients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Empty Client Email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", () => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Has property 'message' with proper value \", () => {\r",
							"    const res = pm.response.json();\r",
							"    pm.expect(res).haveOwnProperty('error');\r",
							"    pm.expect(res.error).to.eq(pm.collectionVariables.get('invalidOrMissingClientEmailErrorMessage'));\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"Test Testov\",\r\n   \"clientEmail\": \"test.testov\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api-clients",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api-clients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Empty Client Name As Number",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", () => {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							"\r",
							"pm.test(\"Has property 'message' with proper value \", () => {\r",
							"    const res = pm.response.json();\r",
							"    pm.expect(res).haveOwnProperty('error');\r",
							"    pm.expect(res.error).to.eq(pm.collectionVariables.get('invalidOrMissingClientEmailErrorMessage'));\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": 12,\r\n   \"clientEmail\": \"{{$randomEmail}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api-clients",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api-clients"
					]
				}
			},
			"response": []
		},
		{
			"name": "Already Registered Client",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 409\", () => {\r",
							"    pm.response.to.have.status(409);\r",
							"});\r",
							"\r",
							"pm.test(\"Has property 'message' with proper value \", () => {\r",
							"    const res = pm.response.json();\r",
							"    pm.expect(res).haveOwnProperty('error');\r",
							"    pm.expect(res.error).to.eq(pm.collectionVariables.get('alreadyRegisteredClientErrorMessage'));\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n   \"clientName\": \"Registered Client\",\r\n   \"clientEmail\": \"registered_client@test.test\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/api-clients",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api-clients"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "invalidOrMissingClientNameErrorMessage",
			"value": "Invalid or missing client name."
		},
		{
			"key": "invalidOrMissingClientEmailErrorMessage",
			"value": "Invalid or missing client email."
		},
		{
			"key": "alreadyRegisteredClientErrorMessage",
			"value": "API client already registered."
		}
	]
}