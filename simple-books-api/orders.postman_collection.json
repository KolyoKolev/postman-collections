{
  "info": {
    "_postman_id": "53bbcb7c-1152-4336-b402-bf6526ecd73f",
    "name": "orders",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Healthy Check",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "const res = pm.response.json();\r",
              "\r",
              "pm.test(\"Status code is 401 Unauthorized\", () => {\r",
              "    pm.response.to.have.status(401);\r",
              "});\r",
              "\r",
              "pm.test(\"Has property 'error' with proper value\", () => {\r",
              "    pm.expect(res).haveOwnProperty('error');\r",
              "    pm.expect(res.error).to.be.a('String');\r",
              "    pm.expect(res.error).to.eq(pm.collectionVariables.get('missingAuthorizationHeaderErrorMessage'));\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "noauth"
        },
        "method": "GET",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/orders",
          "host": ["{{baseUrl}}"],
          "path": ["orders"]
        }
      },
      "response": []
    },
    {
      "name": "All Orders",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "const res = pm.response.json();\r",
              "\r",
              "pm.test(\"Status code is 200 OK\", () => {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "pm.test('Orders have correct properties and value types', () => {\r",
              "    res.forEach(order => {\r",
              "        pm.expect(order.id).to.be.a('String');\r",
              "        pm.expect(order.bookId).to.be.a('Number');\r",
              "        pm.expect(order.customerName).to.be.a('String');\r",
              "        pm.expect(order.createdBy).to.be.a('String');\r",
              "        pm.expect(order.quantity).to.be.a('Number');\r",
              "    })\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/orders",
          "host": ["{{baseUrl}}"],
          "path": ["orders"]
        }
      },
      "response": []
    },
    {
      "name": "Post New Order",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "const res = pm.response.json();\r",
              "\r",
              "pm.test(\"Status code is 201 Created\", () => {\r",
              "    pm.response.to.have.status(201);\r",
              "});\r",
              "\r",
              "pm.test('Order has correct properties and value types', () => {\r",
              "    pm.expect(res.created).to.be.a('Boolean');\r",
              "    pm.expect(res.orderId).to.be.a('String');\r",
              "});\r",
              "\r",
              "pm.collectionVariables.set('orderId', res.orderId)"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"bookId\": 4,\r\n    \"customerName\": \"{{$randomUserName}}\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/orders",
          "host": ["{{baseUrl}}"],
          "path": ["orders"]
        }
      },
      "response": []
    },
    {
      "name": "Single Order",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "const res = pm.response.json();\r",
              "\r",
              "pm.test(\"Status code is 200 OK\", () => {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "pm.test('Order has correct properties and value types', () => {\r",
              "    pm.expect(res.id).to.be.a('String');\r",
              "    pm.expect(res.bookId).to.be.a('Number');\r",
              "    pm.expect(res.customerName).to.be.a('String');\r",
              "    pm.expect(res.createdBy).to.be.a('String');\r",
              "    pm.expect(res.quantity).to.be.a('Number');\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/orders/:orderId",
          "host": ["{{baseUrl}}"],
          "path": ["orders", ":orderId"],
          "variable": [
            {
              "key": "orderId",
              "value": "{{orderId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Invalid Or Missing BookId",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "const res = pm.response.json();\r",
              "\r",
              "pm.test(\"Status code is 400 Bad Request\", () => {\r",
              "    pm.response.to.have.status(400);\r",
              "});\r",
              "\r",
              "pm.test(\"Has property 'error' with proper value\", () => {\r",
              "    pm.expect(res).haveOwnProperty('error');\r",
              "    pm.expect(res.error).to.be.a('String');\r",
              "    pm.expect(res.error).to.eq(pm.collectionVariables.get('missingBookIdErrorMessage'));\r",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "POST",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/orders",
          "host": ["{{baseUrl}}"],
          "path": ["orders"]
        }
      },
      "response": []
    },
    {
      "name": "Existing Username",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 204 No Content\", () => {\r",
              "    pm.response.to.have.status(204);\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        },
        {
          "listen": "prerequest",
          "script": {
            "exec": [
              "pm.collectionVariables.set('patchedUsername', pm.variables.replaceIn('{{$randomFullName}}'))"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "PATCH",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "{\r\n    \"customerName\": \"{{patchedUsername}}\"\r\n}",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/orders/:orderId",
          "host": ["{{baseUrl}}"],
          "path": ["orders", ":orderId"],
          "variable": [
            {
              "key": "orderId",
              "value": "{{orderId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Order With Patched Username",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "const res = pm.response.json();\r",
              "\r",
              "pm.test(\"Status code is 200 OK\", () => {\r",
              "    pm.response.to.have.status(200);\r",
              "});\r",
              "\r",
              "pm.test('Order has correct properties and value types', () => {\r",
              "    pm.expect(res.id).to.be.a('String');\r",
              "    pm.expect(res.bookId).to.be.a('Number');\r",
              "    pm.expect(res.customerName).to.be.a('String');\r",
              "    pm.expect(res.customerName).eql(pm.collectionVariables.get('patchedUsername'));\r",
              "    pm.expect(res.createdBy).to.be.a('String');\r",
              "    pm.expect(res.quantity).to.be.a('Number');\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "protocolProfileBehavior": {
        "disableBodyPruning": true
      },
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "GET",
        "header": [],
        "body": {
          "mode": "raw",
          "raw": "",
          "options": {
            "raw": {
              "language": "json"
            }
          }
        },
        "url": {
          "raw": "{{baseUrl}}/orders/:orderId",
          "host": ["{{baseUrl}}"],
          "path": ["orders", ":orderId"],
          "variable": [
            {
              "key": "orderId",
              "value": "{{orderId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Existing Order While Authorizied",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test(\"Status code is 204 Not Content\", () => {\r",
              "    pm.response.to.have.status(204);\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/orders/:orderId",
          "host": ["{{baseUrl}}"],
          "path": ["orders", ":orderId"],
          "variable": [
            {
              "key": "orderId",
              "value": "{{orderId}}"
            }
          ]
        }
      },
      "response": []
    },
    {
      "name": "Non-Existing Order While Authorizied Copy",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "const res = pm.response.json();\r",
              "\r",
              "pm.test(\"Status code is 404 Not Found\", () => {\r",
              "    pm.response.to.have.status(404);\r",
              "});\r",
              "\r",
              "pm.test(\"Has property 'error' with proper value\", () => {\r",
              "    pm.expect(res).haveOwnProperty('error');\r",
              "    pm.expect(res.error).to.eq(pm.collectionVariables.get('noOrderWithIdErrorMessage'));\r",
              "});\r",
              ""
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "auth": {
          "type": "bearer",
          "bearer": [
            {
              "key": "token",
              "value": "{{accessToken}}",
              "type": "string"
            }
          ]
        },
        "method": "DELETE",
        "header": [],
        "url": {
          "raw": "{{baseUrl}}/orders/:orderId",
          "host": ["{{baseUrl}}"],
          "path": ["orders", ":orderId"],
          "variable": [
            {
              "key": "orderId",
              "value": "non-existing-order-id"
            }
          ]
        }
      },
      "response": []
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    },
    {
      "listen": "test",
      "script": {
        "type": "text/javascript",
        "exec": [""]
      }
    }
  ],
  "variable": [
    {
      "key": "missingAuthorizationHeaderErrorMessage",
      "value": "Missing Authorization header."
    },
    {
      "key": "missingBookIdErrorMessage",
      "value": "Invalid or missing bookId."
    },
    {
      "key": "noOrderWithIdErrorMessage",
      "value": ""
    },
    {
      "key": "orderId",
      "value": ""
    },
    {
      "key": "patchedUsername",
      "value": ""
    }
  ]
}
